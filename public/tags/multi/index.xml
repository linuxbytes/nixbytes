<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>multi on NixBytes</title>
    
    
    
    <link>/tags/multi/</link>
    <description>Recent content in multi on NixBytes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 24 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/multi/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Process Substitution</title>
      <link>/posts/process-substitution/</link>
      <pubDate>Wed, 24 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/process-substitution/</guid>
      <description>
        
          
          
          
        
        
        
          In the world of shell piping, there&amp;rsquo;s a powerful technique that involves piping the standard output (stdout) of one command into the standard input (stdin) of another. However, what happens when you need to pipe the output of multiple commands? This is where process substitution comes in handy.
Process substitution is a shell technique that allows you to use the output of a command as a file argument to another command, without the need to create temporary files or named pipes.
          
        
        </description>
    </item>
    
  </channel>
</rss>